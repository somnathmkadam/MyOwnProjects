RequestSpecification response=	new RequestSpecBuilder().setBaseUri("url").addQueryParam("key", "value").setContentType(ContentType.JSON).build();
	 ResponseSpecification check= new ResponseSpecBuilder().expectStatusCode(200).expectContentType(ContentType.JSON).build();
	 
	Response res=	given().spec(response).body("").when().post("resourcses").then().extract().response();
	
	//OR
	RequestSpecification res1=	given().spec(response).body("");  //we can divide the complete request in two parts
	Response abc=res1.when().post().then().spec(check).extract().response();
   String ress=	abc.asString(); 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. 
Install all required pom 

2. 
Create features package in Test folder

3. 
Create .feature file to write test scenario
write all scenario in it

4. 
Create Utils class in which repeated request part is given in requestspecification method
public static RequestSpecification req;   //create global variable make static so it can be used outside the class
PrintStream log = new PrintStream(new FileOutputStream("logging.txt"));  used to check loges for which 
.addFilter(RequestLoggingFilter.logRequestTo(log)) is used

5.
Create getGlobalValue() method in Util class whos return type is string used to access the values from properties file
create .properties file inside test folder in which baseurl is given

/////////////////////////////////////////////////////////////


Pojo class is used to make body

test runner file used to run project can be run using cmd (Mvn run verify) to generate automation reports
first add https://github.com/damianszczepanik/maven-cucumber-reporting with version which uses plugin mentioned in TestRunner also add logging.txt file in project
tags used to run specific scenario


.feature file: in which we write all scenarios with tags @regression we can give one tag to multiple sceanrios so that specific scenarios will run
Scenario Outline: in .feature file used for adding multiple data in project

Enum class is used to add resources which called in step defination call during request builder

TestDataBuild class is used to call getfares pojo class to set values and make body for our request

Utils class: Used to take data from .properties file and file logs, and set headers and convert response into jsonpath

all scenarios are written here
Tidy Gherkin chrome app used to generate steps or else you can run test runner to get steps

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//To Run project using cmd then first give path of mvn to environment variable path 
	//C:\apache-maven-3.6.1\bin;C:\Program Files\nodejs\
	// C:\apache-maven-3.6.1\      variablename: M2_HOME or MAVEN_HOME
	//then open CMD in administration
	//Goto that project using Cd project path
	// Now use mvn test command which featch test runner file and execute it
	//To run mvn in cmd with tags use: mvn test -Dcucumber.options="--tags @AddPlace"

	
	
	//Now to generte report goto mvn generate report https://github.com/damianszczepanik/maven-cucumber-reporting
	//copy xml and paste it in pom file before dependency
	//and add new version in xml maven-cucumber-reporting version 
	//Now add plugin (Check above) used to create json file in target folder which create jsonreports folder and using that json file html is getting generated
	//cmd run: mvn test verify command to run our project
	
	
	//java -jar jenkins.war used to run jenkins in cmd run .war file
	//jenkins- new item- name- General/advance/use custom workspace- add path of project - This proect is parameterized and add name= tag and in choices and tagnames
	//in golas: test verify -Dcucumber.options="--tags @"$tag""    apply and save so now project will run according to tags
	// test verify run all tests
	





